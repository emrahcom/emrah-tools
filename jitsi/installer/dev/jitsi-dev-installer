#!/bin/bash
set -e

export DEBIAN_FRONTEND=noninteractive
export JITSI_TMPL=https://raw.githubusercontent.com/jitsi-contrib/installers/main/templates/jitsi
export PROSODY_PLUGINS=https://raw.githubusercontent.com/jitsi-contrib/prosody-plugins/main
export TCP=(80 443 4444 5222 5280 5269 5347 5349 8080 8888 9090)
export UDP=(5000 5349 10000)


# -----------------------------------------------------------------------------
# output format
# -----------------------------------------------------------------------------
out() {
    printf "\n"

    while IFS= read -r line; do
        printf "\033[0;31m>>>\033[0m \033[0;33m%s\033[0m\n" "$line"
    done
}


# -----------------------------------------------------------------------------
# trap on exit
# -----------------------------------------------------------------------------
function on_exit {
    if [[ "$COMPLETED" != true ]]; then
        out <<< "Something went wrong. Not completed!"
        exit 1
    else
        out <<EOF
Installation Duration: $DURATION
Completed successfully!
EOF
        exit 0
    fi
}

COMPLETED=false
trap on_exit EXIT


# -----------------------------------------------------------------------------
# environment
# -----------------------------------------------------------------------------
START_TIME=$(date +%s)
BASEDIR=$(pwd)
DEFAULT_ROUTE=$(ip route | egrep '^default ' | head -n1)
PUBLIC_INTERFACE=${DEFAULT_ROUTE##*dev }
PUBLIC_INTERFACE=${PUBLIC_INTERFACE/% */}
PUBLIC_IP=$(ip addr show $PUBLIC_INTERFACE | egrep "$PUBLIC_INTERFACE$" | \
            xargs | cut -d " " -f 2 | cut -d "/" -f1)


# -----------------------------------------------------------------------------
# input check
# -----------------------------------------------------------------------------
clear

# are you sure
out <<EOF
This script can be harmful and will remove already installed Jitsi if exists.
Don't use it on a working production server.
Write YES (uppercase) and press enter if you are crazy!
EOF

read answer
if [[ "$answer" != "YES" ]]; then
    out <<EOF
Aborted! not approved, typed: $answer
Recommendation: Use this script on a newly installed machine
EOF
    exit 1
fi


# whoami
out <<< "checking the user account..."
if [[ "$(whoami)" != "root" ]]; then
    out <<EOF
Aborted! Your are not the root user: $(whoami)
Recommendation: Use the following command to be the 'root' user

    su -l
EOF
    exit 1
fi

# distro
out <<< "checking the distro..."
[[ $(command -v lsb_release) ]] && \
    DISTRO=$(lsb_release -c | cut -d: -f2 | xargs) || \
    DISTRO=$(grep VERSION_CODENAME /etc/os-release | cut -d= -f2)

if [[ "$DISTRO" != "focal" ]] && \
   [[ "$DISTRO" != "bullseye" ]]; then
    out <<EOF
Aborted! Your distro is not supported
Recommendation: Switch to Debian 11 Bullseye or Ubuntu 20.04 Focal Fossa
EOF
    exit 1
fi

# memory
out <<< "checking the total memory..."
MEM=$(cat /proc/meminfo | grep MemTotal | egrep -o "[0-9]*")
if [[ "$MEM" -lt 3800000 ]]; then
    out <<EOF
Aborted! Not enough memory: $MEM kB
Recommendation: The total memory should be at least 4 GB
EOF
    exit 1
fi

# jitsi host address
out <<< "checking Jitsi FQDN..."
if [[ -z "$JITSI_HOST" ]]; then
    out <<EOF
Aborted! Unknown Jitsi host address
Recommendation: Set Jitsi host address according to the following command
  and try again

    export JITSI_HOST=jitsi.yourdomain.com
EOF
    exit 1
fi

# jitsi fqdn
if [[ -z "$(echo $JITSI_HOST | egrep -o '[a-zA-Z]')" ]]; then
    out <<EOF
Aborted! Jitsi host address is not FQDN: $JITSI_HOST
Recommendation: Don't use an IP address, use a valid FQDN address
EOF
    exit 1
fi


# -----------------------------------------------------------------------------
# remove the old installation if exists
# -----------------------------------------------------------------------------
out <<< "removing the old installation if exists..."

systemctl stop jibri-xorg.service || true
systemctl stop jigasi.service || true
systemctl stop jitsi-videobridge2.service || true
systemctl stop jicofo.service || true
systemctl stop prosody.service || true
systemctl stop coturn.service || true
systemctl stop stunnel4.service || true
systemctl stop nginx.service || true

apt-get -y purge jibri || true
apt-get -y purge jigasi || true
apt-get -y purge 'jitsi-*' || true
apt-get -y purge jicofo || true
apt-get -y purge prosody || true
apt-get -y purge 'prosody-*' || true
apt-get -y purge coturn || true
apt-get -y purge stunnel || true
apt-get -y purge nginx || true
apt-get -y purge 'nginx-*' || true
apt-get -y purge 'openjdk-*' || true
apt-get -y purge 'adoptopenjdk-*' || true
apt-get -y purge chromium chromium-common chromium-driver || true
apt-get -y purge chromium-browser chromium-chromedriver || true
apt-get -y purge chromium-codecs-ffmpeg chromium-codecs-ffmpeg-extra || true
apt-get -y purge google-chrome-stable || true
apt-get -y purge ungoogled-chromium || true
apt-get -y purge va-driver-all vdpau-driver-all || true
apt-get -y autoremove --purge

deluser jibri || true
delgroup jibri || true
deluser dev || true
delgroup dev || true

rm -rf /home/jibri
rm -rf /home/dev
rm -rf /etc/chromium
rm -rf /etc/jitsi
rm -rf /etc/prosody
rm -rf /etc/nginx
rm -rf /etc/opt/chrome
rm -rf /usr/share/jitsi-meet
rm -rf /usr/share/jitsi-videobridge
rm -rf /usr/share/jicofo
rm -f  /etc/apt/sources.list.d/buster.list
rm -f  /etc/apt/sources.list.d/jitsi-stable.list
rm -f  /etc/apt/sources.list.d/google-chrome.list
rm -f  /etc/apt/sources.list.d/ungoogled-chromium.list
rm -f  /usr/local/bin/chromedriver


# -----------------------------------------------------------------------------
# base packages
# -----------------------------------------------------------------------------
out <<< "installing base packages..."

for i in $(seq 3); do
    apt-get -y --allow-releaseinfo-change update && sleep 3 && break
done

apt-get $APT_PROXY_OPTION -y install apt-utils \
    -o Dpkg::Options::="--force-confdef" \
    -o Dpkg::Options::="--force-confold"
apt-get $APT_PROXY_OPTION -y upgrade \
    -o Dpkg::Options::="--force-confdef" \
    -o Dpkg::Options::="--force-confold"
apt-get $APT_PROXY_OPTION -y install wget curl ca-certificates openssl
apt-get $APT_PROXY_OPTION -y install apt-transport-https gnupg
apt-get $APT_PROXY_OPTION -y install iputils-ping dnsutils
apt-get $APT_PROXY_OPTION -y install tmux vim less ack jq rsync bzip2
apt-get $APT_PROXY_OPTION -y install procps htop bmon
apt-get $APT_PROXY_OPTION -y install net-tools ngrep ncat
apt-get $APT_PROXY_OPTION -y install ssl-cert certbot
apt-get $APT_PROXY_OPTION -y install gcc git


# -----------------------------------------------------------------------------
# environment check
# -----------------------------------------------------------------------------
# external ip
out <<< "checking the external IP..."
EXTERNAL_IP=$(dig -4 +short myip.opendns.com a @resolver1.opendns.com) || true
if [[ -z "$EXTERNAL_IP" ]]; then
    out <<EOF
Aborted! The external IP not found
Recommendation: Check if myip.opendns.com is accessible
EOF
    exit 1
fi


# -----------------------------------------------------------------------------
# port availability check
# -----------------------------------------------------------------------------
out <<< "checking the availability of TCP ports..."
netstat -ltnp | egrep '^tcp' | while read -r l; do
    port=$(echo $l | awk '{print $4}' | rev | cut -d: -f1 | rev)
    for p in ${TCP[*]}; do
        if [[ "$p" = "$port" ]]; then
            prog=$(echo $l | cut -d/ -f2)
            proto=$(echo $l | awk '{print $1}')
            out <<EOF
Aborted! The port $proto/$port is already in use by $prog
Recommendation: disable this application or change its port
EOF
            exit 1
        fi
    done
done

out <<< "checking the availability of UDP ports..."
netstat -lunp | egrep '^udp' | while read -r l; do
    port=$(echo $l | awk '{print $4}' | rev | cut -d: -f1 | rev)
    for p in ${UDP[*]}; do
        if [[ "$p" = "$port" ]]; then
            prog=$(echo $l | cut -d/ -f2)
            proto=$(echo $l | awk '{print $1}')
            out <<EOF
Aborted! The port $proto/$port is already in use by $prog
Recommendation: remove this application or change its port
EOF
            exit 1
        fi
    done
done


# -----------------------------------------------------------------------------
# installation
# -----------------------------------------------------------------------------
# openjdk-11-jre-headless
apt-get $APT_PROXY_OPTION -y install openjdk-11-jre-headless

# jitsi-meet
out <<< "installing Jitsi..."

wget -qO /tmp/jitsi.gpg.key https://download.jitsi.org/jitsi-key.gpg.key
cat /tmp/jitsi.gpg.key | gpg --dearmor > /usr/share/keyrings/jitsi.gpg
wget -O /etc/apt/sources.list.d/jitsi-stable.list \
    $JITSI_TMPL/etc/apt/sources.list.d/jitsi-stable.list

apt-get update
debconf-set-selections <<< \
    "jicofo jitsi-videobridge/jvb-hostname string $JITSI_HOST"
debconf-set-selections <<< \
    "jitsi-meet-web-config jitsi-meet/cert-choice select Generate a new self-signed certificate (You will later get a chance to obtain a Let's encrypt certificate)"
apt-get $APT_PROXY_OPTION -y --install-recommends install jitsi-meet
apt-get $APT_PROXY_OPTION -y install libnginx-mod-http-lua
apt-get $APT_PROXY_OPTION -y install luarocks liblua5.2-dev


# -----------------------------------------------------------------------------
# prosody
# -----------------------------------------------------------------------------
out <<< "configuring Prosody..."

mkdir -p /etc/systemd/system/prosody.service.d
wget -O /etc/systemd/system/prosody.service.d/override.conf \
    $JITSI_TMPL/etc/systemd/system/prosody.service.d/override.conf
wget -O /etc/prosody/conf.avail/network.cfg.lua \
    $JITSI_TMPL/etc/prosody/conf.avail/network.cfg.lua
ln -s ../conf.avail/network.cfg.lua /etc/prosody/conf.d/
sed -i "/rate *=.*kb.s/  s/[0-9]*kb/1024kb/" /etc/prosody/prosody.cfg.lua
sed -i "s/^-- \(https_ports = { };\)/\1/" \
    /etc/prosody/conf.avail/$JITSI_HOST.cfg.lua
sed -i "/turns.*tcp/ s/host\s*=[^,]*/host = \"$TURN_HOST\"/" \
    /etc/prosody/conf.avail/$JITSI_HOST.cfg.lua
sed -i "/turns.*tcp/ s/5349/443/" \
    /etc/prosody/conf.avail/$JITSI_HOST.cfg.lua
wget -O /usr/share/jitsi-meet/prosody-plugins/mod_token_affiliation.lua \
    $PROSODY_PLUGINS/token_affiliation/mod_token_affiliation.lua
wget -O /usr/share/jitsi-meet/prosody-plugins/mod_token_owner_party.lua \
    $PROSODY_PLUGINS/token_owner_party/mod_token_owner_party.lua
wget -O /usr/share/jitsi-meet/prosody-plugins/mod_time_restricted.lua \
    $PROSODY_PLUGINS/time_restricted/mod_time_restricted.lua
wget -O /usr/share/jitsi-meet/prosody-plugins/mod_jibri_autostart.lua \
    $PROSODY_PLUGINS/jibri_autostart/mod_jibri_autostart.lua

systemctl daemon-reload
systemctl restart prosody.service


# -----------------------------------------------------------------------------
# jicofo
# -----------------------------------------------------------------------------
out <<< "configuring Jicofo..."

hocon -f /etc/jitsi/jicofo/jicofo.conf \
    set jicofo.conference.enable-auto-owner true

sed -i '/^JICOFO_AUTH_PASSWORD=/a \
\
# set the maximum memory for the jicofo daemon\
JICOFO_MAX_MEMORY=1024m' \
    /etc/jitsi/jicofo/config

systemctl restart jicofo.service


# -----------------------------------------------------------------------------
# nginx
# -----------------------------------------------------------------------------
out <<< "configuring Nginx..."

mkdir -p /etc/systemd/system/nginx.service.d
wget -O /etc/systemd/system/nginx.service.d/override.conf \
    $JITSI_TMPL//etc/systemd/system/nginx.service.d/override.conf

mkdir -p /usr/local/share/nginx/modules-available
wget -O /usr/local/share/nginx/modules-available/jitsi-meet.conf \
    $JITSI_TMPL/usr/local/share/nginx/modules-available/jitsi-meet.conf
sed -i "s/___LOCAL_IP___/$PUBLIC_IP/" \
    /usr/local/share/nginx/modules-available/jitsi-meet.conf
sed -i "s/___TURN_HOST___/$TURN_HOST/" \
    /usr/local/share/nginx/modules-available/jitsi-meet.conf

mv /etc/nginx/sites-available/$JITSI_HOST.conf \
    /etc/nginx/sites-available/$JITSI_HOST.conf.old
wget -O /etc/nginx/sites-available/$JITSI_HOST.conf \
    $JITSI_TMPL/etc/nginx/sites-available/jms.conf
sed -i "s/___JITSI_HOST___/$JITSI_HOST/" \
    /etc/nginx/sites-available/$JITSI_HOST.conf
sed -i "s/___TURN_HOST___/$TURN_HOST/" \
    /etc/nginx/sites-available/$JITSI_HOST.conf

ln -s /usr/local/share/nginx/modules-available/jitsi-meet.conf \
    /etc/nginx/modules-enabled/99-jitsi-meet-custom.conf
rm /etc/nginx/sites-enabled/default
rm -rf /var/www/html
ln -s /usr/share/jitsi-meet /var/www/html

systemctl daemon-reload
systemctl stop nginx.service
systemctl start nginx.service

# nginx config is ok
timeout 8 curl -s "$CHECKMYPORT?proto=udp&port=60000&text=ok-conf-nginx" \
    >/dev/null || true


# -----------------------------------------------------------------------------
# jvb
# -----------------------------------------------------------------------------
out <<< "configuring JVB..."

# default memory limit
sed -i '/^JVB_SECRET=/a \
\
# set the maximum memory for the JVB daemon\
VIDEOBRIDGE_MAX_MEMORY=3072m' \
    /etc/jitsi/videobridge/config

# colibri
hocon -f /etc/jitsi/videobridge/jvb.conf \
    set videobridge.apis.rest.enabled true
hocon -f /etc/jitsi/videobridge/jvb.conf \
    set videobridge.ice.udp.port 10000

# NAT harvester
[[ "$EXTERNAL_IP" = "$PUBLIC_IP" ]] && COMMENT="#"
cat >>/etc/jitsi/videobridge/sip-communicator.properties <<EOF
${COMMENT}org.ice4j.ice.harvest.NAT_HARVESTER_LOCAL_ADDRESS=$PUBLIC_IP
${COMMENT}org.ice4j.ice.harvest.NAT_HARVESTER_PUBLIC_ADDRESS=$EXTERNAL_IP
EOF

systemctl restart jitsi-videobridge2.service

# jvb config is ok
timeout 8 curl -s "$CHECKMYPORT?proto=udp&port=60000&text=ok-conf-jvb" \
    >/dev/null || true


# -----------------------------------------------------------------------------
# lets encrypt
# -----------------------------------------------------------------------------
out <<< "setting Let's Encrypt certificates..."

certbot certonly --dry-run --non-interactive -m info@$JITSI_HOST --agree-tos \
    --duplicate --webroot -w /var/www/html -d $JITSI_HOST,$TURN_HOST || true
sleep 3
certbot certonly --non-interactive -m info@$JITSI_HOST --agree-tos \
    --duplicate --webroot -w /var/www/html -d $JITSI_HOST,$TURN_HOST

rm -f /etc/jitsi/meet/$JITSI_HOST.crt
rm -f /etc/jitsi/meet/$JITSI_HOST.key
ln -s /etc/letsencrypt/live/$JITSI_HOST/fullchain.pem \
    /etc/jitsi/meet/$JITSI_HOST.crt
ln -s /etc/letsencrypt/live/$JITSI_HOST/privkey.pem \
    /etc/jitsi/meet/$JITSI_HOST.key

out <<< "restarting Certbot..."
systemctl restart certbot.service

out <<< "restarting Coturn..."
systemctl restart coturn.service

out <<< "restarting Nginx..."
systemctl restart nginx.service

# tls is ok
timeout 8 curl -s "$CHECKMYPORT?proto=udp&port=60000&text=ok-tls" \
    >/dev/null || true


# -----------------------------------------------------------------------------
# extra customization
# -----------------------------------------------------------------------------
[[ -f "/tmp/jbi-custom-extra" ]] && source /tmp/jbi-custom-extra


# -----------------------------------------------------------------------------
# completed
# -----------------------------------------------------------------------------
# completed
timeout 8 curl -s "$CHECKMYPORT?proto=udp&port=60000&text=ok-completed" \
    >/dev/null || true

END_TIME=$(date +%s)
DURATION=$(date -u -d "0 $END_TIME seconds - $START_TIME seconds" +"%H:%M:%S")
COMPLETED=true
